{"version":3,"sources":["Table.js","App.js","serviceWorker.js","index.js"],"names":["TableHours","id","striped","hover","variant","className","this","props","days","map","day","showSecond","defaultValue","defaultStart","onChange","e","onChangeStart","format","use12Hours","inputReadOnly","defaultEnd","onChangeEnd","total","React","Component","App","state","counter","totalHours","moment","hour","minute","bind","addRow","calculateHours","calculateTotalForDay","displayHelp","displayTable","startTime","endTime","hours","duration","diff","asHours","Math","round","totalHoursInMonth","setState","index","start","end","startDate","endDate","hoursRounded","value","undefined","console","log","calculateDifferenceInDefaultHours","prevState","counterActive","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e84368db.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport Table from 'react-bootstrap/Table'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport TimePicker from 'rc-time-picker';\r\nimport 'rc-time-picker/assets/index.css';\r\nimport moment from 'moment'\r\n\r\nclass TableHours extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n\r\n            <Table id=\"myTable\" striped hover variant=\"dark\">\r\n                <thead className='table-header'>\r\n                    <tr>\r\n                        <th>#</th>\r\n                        <th>Start Time</th>\r\n                        <th>End Time</th>\r\n                        <th>Hours </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {/* {console.log(this.state.days)} */}\r\n                    {this.props.days.map((day) => (\r\n                        <tr>\r\n                            <td>{day.id}</td>\r\n                            <td>\r\n                                <TimePicker\r\n                                    showSecond={false}\r\n                                    defaultValue={this.props.defaultStart}\r\n                                    className=\"xxx\"\r\n                                    onChange={(e) => this.props.onChangeStart(e, day.id)}\r\n                                    format={this.props.format}\r\n                                    use12Hours\r\n                                    inputReadOnly\r\n                                />\r\n                            </td>\r\n                            <td>\r\n                                <TimePicker\r\n                                    showSecond={false}\r\n                                    defaultValue={this.props.defaultEnd}\r\n                                    className=\"xxx\"\r\n                                    onChange={(e) => this.props.onChangeEnd(e, day.id)}\r\n                                    format={this.props.format}\r\n                                    use12Hours\r\n                                    inputReadOnly\r\n                                />\r\n                            </td>\r\n                            <td>{day.total}</td>\r\n                        </tr>\r\n                    ))}\r\n\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TableHours;\r\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Button from 'react-bootstrap/Button'\nimport 'rc-time-picker/assets/index.css';\nimport moment from 'moment'\nimport TableHours from './Table.js'\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 0,\n      format: 'h:mm a',\n      totalHours: 0,\n      days: [],\n      defaultStart: moment().hour(9).minute(0),\n      defaultEnd: moment().hour(19).minute(0)\n    };\n\n    this.onChangeStart = this.onChangeStart.bind(this);\n    this.onChangeEnd = this.onChangeEnd.bind(this);\n    this.addRow = this.addRow.bind(this);\n    this.calculateHours = this.calculateHours.bind(this);\n    this.calculateTotalForDay = this.calculateTotalForDay.bind(this);\n    this.displayHelp = this.displayHelp.bind(this);\n    this.displayTable = this.displayTable.bind(this);\n  }\n\n  calculateDifferenceInDefaultHours() {\n    var startTime = moment(this.state.defaultStart, 'h:mm a')\n    var endTime = moment(this.state.defaultEnd, 'h:mm a')\n\n    var duration = moment.duration(endTime.diff(startTime))\n    var hours = duration.asHours()\n\n    var hoursRounded = Math.round(hours * 10) / 10;\n\n    return hoursRounded;\n  }\n\n  calculateHours() {\n    var totalHoursInMonth = 0\n\n    this.state.days.map((day) => (\n      totalHoursInMonth += day.total\n    ))\n\n    this.setState({ totalHours: totalHoursInMonth })\n  }\n\n  calculateTotalForDay(index) {\n    let days = [...this.state.days];\n    var startTime = days[index].start\n    var endTime = days[index].end\n\n    var startDate = moment(startTime, 'h:mm a')\n    var endDate = moment(endTime, 'h:mm a')\n\n    var duration = moment.duration(endDate.diff(startDate));\n    var hours = duration.asHours();\n\n    var hoursRounded = Math.round(hours * 20) / 20;\n\n\n    days[index].total = hoursRounded\n  }\n\n  onChangeStart(value, index) {\n\n    if (value == undefined || value == '' || value == null) {\n      return\n    }\n    // create the copy of state array\n    let days = [...this.state.days];\n    days[index].start = value.format(this.state.format);\n    this.setState({ days: days }, () => { console.log(\"On Change Start\", this.state) });\n\n    this.calculateTotalForDay(index)\n  }\n\n  onChangeEnd(value, index) {\n    \n    if (value == undefined || value == '' || value == null) {\n      return\n    }\n    // create the copy of state array\n    let days = [...this.state.days];\n    days[index].end = value.format(this.state.format);\n    this.setState({ days: days }, () => { console.log(\"On Change End\", this.state) });\n\n    this.calculateTotalForDay(index)\n  }\n\n  addRow() {\n    var day = {\n      id: this.state.counter,\n      start: this.state.defaultStart,\n      end: this.state.defaultEnd,\n      total: this.calculateDifferenceInDefaultHours()\n    }\n\n    this.setState(prevState => ({\n      counter: this.state.counter + 1,\n      days: [...prevState.days, day]\n    }), () => { console.log(\"Add Row\", this.state) })\n  }\n\n  displayHelp() {\n    if (!this.counterActive()) {\n      return (<h2 className='hint'>Click \"Add Day\" to get started!</h2>)\n    }\n  }\n\n  counterActive() {\n    if (this.state.counter != 0) {\n      return true\n    }\n    return false\n  }\n\n  displayTable() {\n    return (\n      this.counterActive() ?\n        <TableHours\n          format={this.state.format}\n          days={this.state.days}\n          defaultStart={this.state.defaultStart}\n          defaultEnd={this.state.defaultEnd}\n          onChangeStart={this.onChangeStart}\n          onChangeEnd={this.onChangeEnd} />\n        :\n        ''\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {this.displayHelp()}\n          <div className='tableDiv container-max'>\n            {this.displayTable()}\n          </div>\n          <div className=\"white bottom-bar\">\n            <div className=\"container-max grid-bottom\">\n              <div className='float-left item1'>\n                Total Hours Worked This Month: {this.state.totalHours}\n              </div>\n              <div className='buttons'>\n                <Button variant=\"success\" className='p-20 shadow-none' onClick={this.addRow}>Add Day</Button>\n                <br/>\n                <Button variant=\"success\" className='p-20 shadow-none' onClick={this.calculateHours}>Calculate Hours</Button>\n              </div>\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}